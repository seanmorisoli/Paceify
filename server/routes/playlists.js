import express from 'express';
import { createPlaylist, addTracksToPlaylist } from '../services/spotify.js';
const router = express.Router();

// POST /create - Create a new playlist with filtered tracks
router.post('/create', async (req, res) => {
  try {
    const { 
      name, 
      description, 
      tracks, 
      public: isPublic = false,
      access_token 
    } = req.body;

    // Extract access token from Authorization header or request body
    const accessToken = req.headers.authorization?.replace('Bearer ', '') || access_token;
    
    if (!accessToken) {
      return res.status(401).json({ 
        error: 'Access token required. Please authenticate with Spotify first.' 
      });
    }

    // Validate input
    if (!name || !tracks || !Array.isArray(tracks)) {
      return res.status(400).json({
        error: 'Name and tracks array are required',
        example: {
          name: 'My Running Playlist',
          description: 'Perfect for 10:30 pace runs',
          tracks: ['spotify:track:4iV5W9uYEdYUVa79Axb7Rh', 'spotify:track:1301WleyT98MSxVHPZCA6M'],
          public: false
        }
      });
    }

    console.log(`Creating playlist: "${name}" with ${tracks.length} tracks`);

    try {
      // Step 1: Create the playlist using Spotify API
      const playlist = await createPlaylist(
        null, // userId will be auto-fetched from token
        name,
        { 
          description: description || `Generated by Paceify - ${tracks.length} tracks`,
          public: !!isPublic 
        },
        accessToken
      );

      console.log(`Playlist created with ID: ${playlist.id}`);

      // Step 2: Prepare track URIs - ensure they're in the correct format
      const trackUris = tracks.map(track => {
        // If track is already a URI, use it directly
        if (typeof track === 'string' && track.startsWith('spotify:track:')) {
          return track;
        }
        // If track is just an ID, convert to URI format
        if (typeof track === 'string') {
          return `spotify:track:${track}`;
        }
        // If track is an object with id or uri property
        if (typeof track === 'object') {
          return track.uri || `spotify:track:${track.id}`;
        }
        return null;
      }).filter(uri => uri !== null); // Remove any invalid tracks

      if (trackUris.length === 0) {
        return res.status(400).json({
          error: 'No valid track IDs or URIs provided',
          note: 'Tracks should be Spotify track IDs or URIs in format spotify:track:...'
        });
      }

      // Step 3: Add tracks to the playlist
      console.log(`Adding ${trackUris.length} tracks to playlist...`);
      const addTracksResponse = await addTracksToPlaylist(playlist.id, trackUris, accessToken);

      console.log(`Successfully added tracks to playlist: ${playlist.id}`);

      // Step 4: Return the created playlist info
      const response = {
        success: true,
        message: 'Playlist created successfully',
        playlist: {
          id: playlist.id,
          name: playlist.name,
          description: playlist.description,
          public: playlist.public,
          spotify_url: playlist.external_urls?.spotify,
          total_tracks: trackUris.length,
          tracks_added: addTracksResponse.reduce((sum, batch) => sum + (batch.snapshot_id ? trackUris.slice(sum, sum + 100).length : 0), 0),
          created_at: new Date().toISOString()
        }
      };

      res.json(response);

    } catch (spotifyError) {
      console.error('Spotify API Error:', spotifyError);
      
      // Handle specific Spotify API errors
      if (spotifyError.status === 401) {
        return res.status(401).json({ 
          error: 'Invalid or expired access token. Please re-authenticate with Spotify.' 
        });
      }
      
      if (spotifyError.status === 403) {
        return res.status(403).json({ 
          error: 'Insufficient permissions. Please ensure you have granted playlist modification permissions.' 
        });
      }

      if (spotifyError.status === 429) {
        return res.status(429).json({ 
          error: 'Rate limited by Spotify API. Please try again later.' 
        });
      }

      // Fallback to generic error
      throw spotifyError;
    }

  } catch (error) {
    console.error('Error creating playlist:', error);
    res.status(500).json({ error: 'Failed to create playlist' });
  }
});

router.get('/test', (req, res) => {
  res.json({ 
    message: 'Playlist service is working!',
    info: 'Real Spotify API integration enabled',
    endpoints: [
      'POST /playlists/create - Create playlist with tracks (requires access token)'
    ]
  });
});

export default router;